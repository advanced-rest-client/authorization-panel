/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   authorization-panel.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html, css, LitElement} from 'lit-element';

import {EventsTargetMixin} from '@advanced-rest-client/events-target-mixin/events-target-mixin.js';

import {AuthorizationPanelAmfOverlay} from './authorization-panel-amf-overlay.js';

declare namespace UiElements {

  /**
   * Authorization panel used in the request panel to get user authorization information.
   */
  class AuthorizationPanel extends
    EventsTargetMixin(
    AuthorizationPanelAmfOverlay(
    Object)) {

    /**
     * Selected authorization type. It is one of the types supported by
     * `advanced-rest-client/auth-methods` component.
     *
     * This corresponds to the index of `authMethods` array.
     */
    selected: number|null|undefined;

    /**
     * Current settings of selected auth type.
     *
     * Can be `undefined` if the user hasn't filled all required fields in the
     * form.
     */
    settings: object|null|undefined;

    /**
     * List of authorization methods supported by this element.
     * Each item has `id` and `name` property. The `id` is internal ID for
     * authorization methods. Can be any of: `none`, `basic`, `ntlm`, `digest`,
     * `oauth1` and `oauth2`. The `name` property is a lable for the method
     * used in UI.
     */
    readonly supportedMethods: Array<object|null>|null;
    readonly currentPanel: HTMLElement|null;

    /**
     * List of currently rendered authorization methods.
     * This value changes when `securedBy` changes to reflect number of
     * authorization methods supported by current endpoint.
     */
    authMethods: any[]|null|undefined;

    /**
     * The OAuth2 redirect URL to be set in the OAuth2 form pane.
     */
    redirectUri: boolean|null|undefined;

    /**
     * If true the panels won't render inline documentation if
     * the information is available.
     */
    noDocs: boolean|null|undefined;

    /**
     * Current HTTP method. Passed to digest method.
     */
    httpMethod: string|null|undefined;

    /**
     * Current request URL. Passed to digest method.
     */
    requestUrl: string|null|undefined;

    /**
     * Current request body. Passed to digest method.
     */
    requestBody: string|null|undefined;

    /**
     * Enables Anypoint legacy styling
     */
    legacy: boolean|null|undefined;

    /**
     * Enables Material Design outlined style
     */
    outlined: boolean|null|undefined;

    /**
     * When set the editor is in read only mode.
     */
    readOnly: boolean|null|undefined;

    /**
     * When set all controls are disabled in the form
     */
    disabled: boolean|null|undefined;

    /**
     * If set it renders a narrow layout
     */
    narrow: boolean|null|undefined;
    _attachListeners(): void;
    _detachListeners(): void;

    /**
     * Clears the state of the panel.
     */
    clear(): void;

    /**
     * Replaces active panel with new one and dipatches
     * `authorization-type-changed` event.
     *
     * If the event is canceled it restores previous value in the selector.
     */
    _selectedChanged(selected: Number|null, oldValue: Number|null): void;

    /**
     * Ensures that the authorization header is removed if previously
     * selected (and now deselected) type is one of using Authorization
     * header.
     *
     * @param oldSelected Previously selected auth method
     */
    _ensureAuthHeaderRemoved(oldSelected: Number|null): void;

    /**
     * Dispatches `request-header-deleted` custom event to inform listeners
     * that `authorization` header should not be used.
     */
    _clearAuthHeader(): void;

    /**
     * Lists available authorization methods.
     * By default it returns list from `supportedMethods` property which is the
     * list of all supported methods by this element.
     * If `iron-meta` element with key `auth-methods` is set then it will use
     * this information to compute list of auth methods.
     * See element description for more information.
     *
     * @returns See `supportedMethods` property for data model.
     */
    _listAuthMethods(): Array<object|null>|null;

    /**
     * Creates a listing of methods from `iron-meta` definition.
     *
     * @returns List of methods defined in `iron-meta`
     * or undefined if not set.
     */
    _listMetaAuthMethods(): any[]|null|undefined;

    /**
     * Handler for `auth-settings-changed` custom event.
     * Sets up `settings` property from the event.
     */
    _authSettingsHandler(e: CustomEvent|null): void;

    /**
     * Restores settings to a panel including selection and data.
     *
     * @param settings The same settings object as dispatched in
     * `detail` object from this element.
     */
    restore(settings: object|null): void;

    /**
     * Notifies settings change if currently selected method is the same as
     * `settings.type`.
     */
    _notifySettings(): void;

    /**
     * Rstores authorization settings if event is external.
     */
    _onAuthSettingsChanged(e: CustomEvent|null): void;

    /**
     * Processes incomming settings and acts if any action needed to authorize
     * the use has to be performed.
     *
     * @param settings Current settings.
     */
    _processPanelSettings(settings: object|null): void;

    /**
     * Handles the case when OAuth2 settings changed.
     *
     * @param settings Oauth2 auth settings object
     */
    _handleOauth2Settings(settings: object|null): void;

    /**
     * Handles the case when digest auth method settings changed.
     *
     * @param settings Digest auth method settings object
     * It can be either username and password (that will be passed to
     * transport method) then this function do nothing or list of Authorization
     * header parameters.
     */
    _handleDigestSettings(settings: object|null): void;
    fire(type: any, detail: any, options: any): any;

    /**
     * If selected authorization type is `oauth1` or `oauth2` it calls
     * `authorize()` function of selected panel.
     * If other method is selected it does nothing.
     *
     * @returns True if the panel received intent to authorize and
     * `false` otherwise
     */
    forceTokenAuthorization(): Boolean|null;

    /**
     * Dispatches analytics event.
     *
     * @param category Event category
     * @param action Event action
     * @param label Event label
     */
    _analyticsEvent(category: String|null, action: String|null, label: String|null): void;
    _selectionHandler(e: any): void;
    _selectorTemplate(): any;
    _panelTemplate(): any;
    _basicTemplate(): any;
    _digestTemplate(): any;
    _ntlmTemplate(): any;
    _oauth2Template(type: any, name: any): any;
    _oauth1Template(type: any, name: any): any;
    _customTemplate(type: any, name: any): any;
    _passThroughTemplate(): any;
    render(): any;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "authorization-panel": UiElements.AuthorizationPanel;
  }
}
